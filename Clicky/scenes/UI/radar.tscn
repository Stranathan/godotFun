[gd_scene load_steps=9 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://scripts/UI/rader.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

float when_eq(float x, float y) {
  return 1.0 - abs(sign(x - y));
}
float when_neq(float x, float y)
{
	return abs(sign(x - y));
}
float when_gt(float x, float y)
{
	return max(sign(x - y), 0.0);
}
float when_lt(float x, float y) 
{
  return max(sign(y - x), 0.0);
}
float when_ge(float x, float y)
{
  return 1.0 - when_lt(x, y);
}
float when_le(float x, float y) 
{
	return 1.0 - when_gt(x, y);
}
float strip(float gen, float start, float stop, float blur)
{
	float ret =  1. - smoothstep(start, stop + blur, gen);
	return ret;
}
float border(vec2 gen, float xBorder, float yBorder)
{
	float lhsXStrip = strip(gen.x, -xBorder, -xBorder, -0.01);
	float rhsXStrip = strip(gen.x, xBorder, xBorder, 0.01);
	float lhsYStrip = strip(gen.y, -yBorder, -yBorder, -0.01);
	float rhsYStrip = strip(gen.y, yBorder, yBorder, 0.01);
	return (lhsXStrip * rhsXStrip * lhsYStrip * rhsYStrip);
}
void fragment()
{
	vec2 uv = 2. * UV - 1.;
	float b = border(uv, 0.95, 0.95);
	vec3 col = vec3(0.1, 0.5, 1.) * (1. - b);
	COLOR = vec4(col, when_gt(1. - b, 0.2));
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

float when_lt(float x, float y)
{
	return max(sign(y - x), 0.0);
}

void fragment() 
{
	vec2 uv = 2. * UV - 1.;
	uv *= vec2(2.); // scale
	float len = 1. - smoothstep(0.3, 0.38, length(uv));
	vec3 col = vec3(0.9, 0.1, 0.2) * len * abs(sin(TIME * 4.0));
	COLOR = vec4(col, when_lt(0.3, len));
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

float when_eq(float x, float y) {
  return 1.0 - abs(sign(x - y));
}
float when_neq(float x, float y)
{
	return abs(sign(x - y));
}
float when_gt(float x, float y)
{
	return max(sign(x - y), 0.0);
}
float when_lt(float x, float y) 
{
  return max(sign(y - x), 0.0);
}
float when_ge(float x, float y)
{
  return 1.0 - when_lt(x, y);
}
float when_le(float x, float y) 
{
	return 1.0 - when_gt(x, y);
}
float strip(float gen, float start, float stop, float blur)
{
	float ret =  1. - smoothstep(start, stop + blur, gen);
	return ret;
}
float border(vec2 gen, float xBorder, float yBorder)
{
	float lhsXStrip = strip(gen.x, -xBorder, -xBorder, -0.01);
	float rhsXStrip = strip(gen.x, xBorder, xBorder, 0.01);
	float lhsYStrip = strip(gen.y, -yBorder, -yBorder, -0.01);
	float rhsYStrip = strip(gen.y, yBorder, yBorder, 0.01);
	return (lhsXStrip * rhsXStrip * lhsYStrip * rhsYStrip);
}
void fragment()
{
	vec2 uv = 2. * UV - 1.;
	uv *= 1.3;
	float function = -abs(3. * uv.y) + 0.4;
	float graph = 1. - smoothstep(function, function + 0.01, uv.x);
	graph *= 1. - strip(uv.x, -0.3, -0.3, 0.01);
	vec3 col = vec3(0.1, 0.5, 1.) * graph;
	COLOR = vec4(col, when_gt(graph, 0.1));
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[node name="radar" type="Control"]
margin_right = 40.0
margin_bottom = 40.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="NinePatchRect" type="NinePatchRect" parent="."]
material = SubResource( 2 )
margin_right = 100.0
margin_bottom = 100.0
texture = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="enemy" type="Sprite" parent="NinePatchRect"]
visible = false
material = SubResource( 4 )
position = Vector2( 50, 50 )
texture = ExtResource( 1 )

[node name="player" type="Sprite" parent="NinePatchRect"]
material = SubResource( 6 )
position = Vector2( 50, 50 )
texture = ExtResource( 1 )
